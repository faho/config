#!/usr/bin/env fish
#
# NAME
#      shark - sparklines for your fish
#
# SYNOPSIS
#     shark [-h|--help] <value>[,...]
#
# DESCRIPTION
#     Parse a string or stream of characters and generate sparklines
#     for any real positive numbers in a dataset.
#
# EXAMPLES
#     shark 1 5 22 13 53
#       ▁▁▃▂█
#     shark 0,30,55,80,33,150
#       ▁▂▃▄▂█
#     echo 1/2/3/5/6/7/5/8/2 | shark
#       ▁▂▃▅▆▇▅█▂
#     echo 9 13 5 17 1 | shark
#       ▄▆▂█▁
#
# AUTHORS
#      Jorge Bucaran <jbucaran@me.com>
#
# CREDITS
#      Based on Zach Holman [github.com/holman/spark]
#
# v0.1.0
#/
function shark.split
  set -l ln first
  set -l lt ""
  for char in (echo $argv | grep -o .)
    switch $char
      # Negative numbers. Reset hyphen if followed by another.
      case -
        test -z $lt
          and set lt -
          or set lt  ""
      # Read numbers, split by \n if a ln has been collected.
      case 0 1 2 3 4 5 6 7 8 9 .
        test -n $ln -a $ln != first
          and printf $ln
        test -z $lt
          or printf $lt
        printf $char
        set ln ""
      # Reduce everything else to a \n, skip first character.
      case \*
        # Hyphens not inmediately prepended to numbers are just hyphens.
        set lt ""
        test -z $ln -a $ln != first
          and set ln \n
    end
  end
end

function shark.help
  echo "\
  USAGE
      shark [-h|--help] <value>[,...]

  EXAMPLES
      shark 1 5 22 13 53
        ▁▁▃▂█
      shark 0,30,55,80,33,150
        ▁▂▃▄▂█
      echo 1/2/3/5/6/7/5/8/2 | ./shark
        ▁▂▃▅▆▇▅█▂
      echo 9 13 5 17 1 | shark
        ▄▆▂█▁"
end

# Show help if -h\* option is set or stdin (0) is a terminal.
contains -- $argv[1] h -h --h --he --hel --help help
or [ (count $argv) -lt 1 -a -t 0 ]
and shark.help
  and exit 0

test -t 0 # Collect data if stdin (0) is a pipe.
  or set argv (cat)

set -l sparks ▁ ▂ ▃ ▄ ▅ ▆ ▇ █
set -l argv (shark.split $argv)
set -l list (printf "%s\n" $argv | sort --numeric-sort)
set -l min $list[1]
set -l max $list[-1]

# At least 2 blocks to prevent zero division if data is constant.
test $min -eq $max
  and set sparks ▅ ▆

set -l fit (math "(($max)/1-($min)/1) * 2^8 / ("(count $sparks)"-1)")
test $fit -lt 1
  and set fit 1

for val in $argv
  echo -n $sparks[(math "(($val)/1-($min)/1) * 2^8 / $fit + 1")]
end
